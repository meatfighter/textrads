    public void write(final Serializable obj) {
        
        synchronized (stateMonitor) {
            if (state != State.RUNNING) {
                return;
            }
        }
        
        if (outQueue.isFull()) {
            stop();
            return;
        }
        
        final byte[] byteArray;
        try {
            byteArray = IOUtil.toByteArray(obj);
        } catch (final IOException ignored) {
            stop();
            return;
        }
        
        final QueueElement element = outQueue.getWriteElement();
        element.setType(QueueElement.Type.DATA);
        element.setData(byteArray);
        outQueue.incrementWriteIndex();
    } 

        InputEventSource.poll(outQueue.getWriteElement().getInputEvents(0));
        outQueue.incrementWriteIndex();

        for (int i = inQueue.size() - 1; i >= 0; --i) {
            final QueueElement element = inQueue.getReadElement();
            final byte[] data = element.getData();
            if (data != null) {
                try {
                    GameStateSource.setState(data);
                } catch (final IOException | ClassNotFoundException ignored) {
                    stop();
                    return;
                }
            } else {
                final GameState gameState = GameStateSource.getState();
                final InputEventList[] events = element.getInputEvents();
                for (int p = 0; p < events.length; ++p) {
                    final InputEventList es = events[p];
                    for (int j = 0; j < es.size(); ++j) {
                        gameState.handleInputEvent(es.get(j), p);
                    }
                }
            }
            inQueue.incrementReadIndex();
        }


0 Server/Client
 1
 2 Host: ...
 3 Port: ...
 4                              |
 5                              |
 6 [S] Start                    |
 7                              |  Error: Failed to ... / Waiting for Server/Client...
 8                              |  
 9 [H] Set host   [P] Set Port  |  
10                              |
11                              |
12                              |
13                              |
14 [Esc] Back  [Ctrl+C] Exit

--------------------------






Vs. Human

[S] Play as Server  
[C] Play as Client

[Esc] Back  [Ctrl+C] Exit

---------------------

Server

Host: ...
Port: ...

[R] Run
[H] Set Host
[P] Set Port

[Esc] Back  [Ctrl+C] Exit

---------------------

Server

Host: _

[Esc] Back  [Ctrl+C] Exit

---------------------

Server

Port: _

[Esc] Back  [Ctrl+C] Exit

---------------------

Server Error

Port already in use.

[Esc] Back  [Ctrl+C] Exit

---------------------

Waiting for Client...

[Esc] Back  [Ctrl+C] Exit

---------------------

Play again?

[Y] Yes
[N] No

[Ctrl+C] Exit

---------------------

---------------------

Client

Host: ...
Port: ...

[R] Run
[H] Set Host
[P] Set Port

[Esc] Back  [Ctrl+C] Exit

---------------------

Client

Host: _

[Esc] Back  [Ctrl+C] Exit

---------------------

Client

Port: _

[Esc] Back  [Ctrl+C] Exit

---------------------

Client Error

Cannot connect to host.

[Esc] Back  [Ctrl+C] Exit

---------------------

Waiting for Server...

[Esc] Back  [Ctrl+C] Exit

---------------------

Play again?

[Y] Yes
[N] No

[Ctrl+C] Exit


TODO:
No rotation and invisible initial scores need to be lowered.



Marathon / Constant Level / Rising Garbage / No Rotation / Invisible:

  00000000001111111111
  01234567890123456789
0 XX+--------------+XX
1 XX|              |XX
2 XX|   Game Over  |XX
3 XX|              |XX
4 XX|              |XX
5 XX|  [Enter] ->  |XX
6 XX|              |XX
7 XX| [Ctrl+C]  X  |XX  
8 XX|              |XX
9 XX+--------------+XX
  01234567890123456789
  00000000001111111111


  0000000000111111111122222222223333333333
  0123456789012345678901234567890123456789
0 XXXXXXXX+----------------------+XXXXXXXX
1 XXXXXXXX|                      |XXXXXXXX
2 XXXXXXXX|      Game Over       |XXXXXXXX
3 XXXXXXXX|                      |XXXXXXXX
4 XXXXXXXX|                      |XXXXXXXX
5 XXXXXXXX|   [Enter] Continue   |XXXXXXXX
6 XXXXXXXX|                      |XXXXXXXX
7 XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
8 XXXXXXXX|                      |XXXXXXXX
9 XXXXXXXX+----------------------+XXXXXXXX
  0123456789012345678901234567890123456789
  0000000000111111111122222222223333333333


Three Minutes:

     Game Over / Time Up

[Enter] Continue  [Ctrl+C] Exit


XX+--------------+XX
XX|              |XX
XX|    Time Up   |XX
XX|              |XX
XX|              |XX
XX|  [Enter] ->  |XX
XX|              |XX
XX| [Ctrl+C]  X  |XX  
XX|              |XX
XX+--------------+XX
01234567890123456789



XXXXXXXX+----------------------+XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|       Time Up        |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|   [Enter] Continue   |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX+----------------------+XXXXXXXX
0123456789012345678901234567890123456789




Garbage Heap / Forty Lines:

    Game Over / Success!

[Enter] Continue  [Ctrl+C] Exit


XX+--------------+XX
XX|              |XX
XX|   Success!   |XX
XX|              |XX
XX|              |XX
XX|  [Enter] ->  |XX
XX|              |XX
XX| [Ctrl+C]  X  |XX  
XX|              |XX
XX+--------------+XX
01234567890123456789



XXXXXXXX+----------------------+XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|       Success!       |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|   [Enter] Continue   |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX+----------------------+XXXXXXXX
0123456789012345678901234567890123456789



Vs. AI / Vs. Human

   Round Won / Round Lost / Game Over / Success!

[Enter] Continue  
[Esc] Give Up
[Ctrl+C] Exit




XX+--------------+XX
XX|              |XX
XX|   Round Won  |XX
XX|              |XX
XX|              |XX
XX|  [Enter] ->  |XX
XX|              |XX
XX| [Ctrl+C]  X  |XX  
XX|              |XX
XX+--------------+XX
01234567890123456789



XXXXXXXX+----------------------+XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|      Round Won       |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|   [Enter] Continue   |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX+----------------------+XXXXXXXX
0123456789012345678901234567890123456789

XX+--------------+XX
XX|              |XX
XX|  Round Lost  |XX
XX|              |XX
XX|              |XX
XX|  [Enter] --> |XX
XX|              |XX
XX| [Ctrl+C] End |XX  
XX|              |XX
XX+--------------+XX
01234567890123456789



XXXXXXXX+----------------------+XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|      Round Lost      |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|   [Enter] Continue   |XXXXXXXX
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
XXXXXXXX|                      |XXXXXXXX
XXXXXXXX+----------------------+XXXXXXXX
0123456789012345678901234567890123456789





Vs. Human:

   00000000001111111111
   01234567890123456789
 0 XX+--------------+XX
 1 XX|              |XX
 2 XX|   Game Over  |XX
 3 XX|              |XX
 4 XX|  Play Again? |XX
 5 XX|              |XX
 6 XX|    [Y] Yes   |XX
 7 XX|              |XX
 8 XX|    [N] No    |XX
 9 XX|              |XX
10 XX| [Ctrl+C] End |XX  
11 XX|              |XX
12 XX+--------------+XX
   01234567890123456789
   00000000001111111111


   0000000000111111111122222222223333333333
   0123456789012345678901234567890123456789
 0 XXXXXXXX+----------------------+XXXXXXXX
 1 XXXXXXXX|                      |XXXXXXXX
 2 XXXXXXXX|      Game Over       |XXXXXXXX
 3 XXXXXXXX|                      |XXXXXXXX
 4 XXXXXXXX|     Play Again?      |XXXXXXXX
 5 XXXXXXXX|                      |XXXXXXXX
 6 XXXXXXXX|       [Y] Yes        |XXXXXXXX
 7 XXXXXXXX|                      |XXXXXXXX
 8 XXXXXXXX|       [N] No         |XXXXXXXX
 9 XXXXXXXX|                      |XXXXXXXX
10 XXXXXXXX|  [Ctrl+C] Exit       |XXXXXXXX  
11 XXXXXXXX|                      |XXXXXXXX
12 XXXXXXXX+----------------------+XXXXXXXX
   0123456789012345678901234567890123456789
   0000000000111111111122222222223333333333




80x24
160x48

0
1 Congratulations! You got Today's Best 3rd Place.
2
3 Enter your initials:
4
5  X
..
23 X
24 X
 
Congratulations! You got the All Time Best 3rd Place.

80x20
160x40
2:1


Main > this > this

[M] Marathon
[C] Constant Level
[G] Garbage Heap
[R] Rising Garbage
[T] Three Minutes
[F] Forty Lines
[N] No Rotation
[I] Invisible
[A] Vs. AI
[H] Vs. Human


Level (0--29)?
Difficulty (0--29)? 
Height (1--12)?



marathon        level
constant level  level
garbage heap    level, height
rising garbage  level
three minutes   level
forty lines     level, height
no rotation     level
invisible       level
vs. ai          level, difficulty

vs. human       level (configs)


Enter your initials: AAA

Play again (Y/N)? 

530 is default blink rate 



I move around 5.5 frames/input.
killed him at 25
killed him at 20
killed him at 15
killed him at 10 6x

Tetris DX max floor height is 12
NES Tetris max garbage heights: 0, 3, 5, 8, 10, 12


0 All Time Best Marathon Records
 1
 2 Rank  Initials  Score      Starting Level
 3
 4  1st  AAA       999999999              12 
 5
 6  2nd
 7
 8  3rd
 9
10  4th
11
12  5th
13
14  6th
15
16  7th
17
18  8th
19
20  9th
21
22 10th

0000000000111111111122222222223333333333444444444455555555556666666666
0123456789012345678901234567890123456789012345678901234567890123456789
Rank  Initials      Score  Starting Level
 1st  AAA       999999999              12
                                         

0000000000111111111122222222223333333333444444444455555555556666666666
0123456789012345678901234567890123456789012345678901234567890123456789
Rank  Initials  Height  Starting Level  Completion Time      Score
 1st  AAA           10              12     DDD:HH:MM:SS  999999999

0000000000111111111122222222223333333333444444444455555555556666666666
0123456789012345678901234567890123456789012345678901234567890123456789
Rank  Initials  Difficulty  Starting Level  Completion Time      Score
 1st  AAA               10              12     DDD:HH:MM:SS  999999999




Structure this as nested state machines.
Each outer machine must poll the state of the inner machine to decide to change state.



sudo service ssh restart

ssh -i wsl_ssh_private_key.pem -p 2022 mbirken@localhost


"Marathon"
score
level **
lines
{ score, starting level }

"Constant Level"
score
level **
lines
{ score, level }

"Garbage Heap": (random garbage height)
level **
height ** -- random garbage height
lines -- counts down from 25
{ height, starting level, completed time, score }

"Rising Garbage" (rising garbage)
score
level **
lines
{ score, starting level }
Lines	Garbage frequency
0-9	Every 6 pieces
10-19	None
20-29	Every 16 pieces
30-39	None
40-49	Every 12 pieces
50-59	None

"Three Minutes"
score
time (3:00)
lines
level **
{ score, starting level }

"Forty Lines" (solid height)
score
time ( :  ) -- counts up
lines -- counts down from 40
level **
height **
{ height, starting level, completed time, score }

"Vs. AI":
score
time ( :  ) -- counts up
lines
level **
difficulty **
{ difficulty, starting level, completed time, score }


{ initials, score, startingLevel } -- "Marathon", "Constant Level", "Rising Garbage", "Three Minutes"
{ initials, height/difficulty, starting level, completed time, score } -- "Garbage Heap", "Forty Lines", "Vs. AI"



   --
   21012
-2 .....
-1 .....
 0 .....
 1 .....
 2 .....


   --
   21012
-2 .....
-1 .....
 0 .XXX.
 1 ..X..
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 .XX..
 1 ..X..
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 .XXX.
 1 .....
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 ..XX.
 1 ..X..
 2 .....



   --
   21012
-2 .....
-1 .....
 0 .XXX.
 1 ...X.
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 ..X..
 1 .XX..
 2 .....

   --
   21012
-2 .....
-1 .X...
 0 .XXX.
 1 .....
 2 .....

   --
   21012
-2 .....
-1 ..XX.
 0 ..X..
 1 ..X..
 2 .....


   --
   21012
-2 .....
-1 .....
 0 ..XX.
 1 .XX..
 2 .....

   --
   21012
-2 .....
-1 .X...
 0 .XX..
 1 ..X..
 2 .....

   --
   21012
-2 .....
-1 ..XX.
 0 .XX..
 1 .....
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 ..XX.
 1 ...X.
 2 .....


   --
   21012
-2 .....
-1 .....
 0 .XX..
 1 ..XX.
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 .XX..
 1 .X...
 2 .....

   --
   21012
-2 .....
-1 .XX..
 0 ..XX.
 1 .....
 2 .....

   --
   21012
-2 .....
-1 ...X.
 0 ..XX.
 1 ..X..
 2 .....


   --
   21012
-2 .....
-1 .....
 0 ..XX.
 1 ..XX.
 2 .....



   --
   21012
-2 .....
-1 .....
 0 .XXX.
 1 .X...
 2 .....

   --
   21012
-2 .....
-1 .XX..
 0 ..X..
 1 ..X..
 2 .....

   --
   21012
-2 .....
-1 ...X.
 0 .XXX.
 1 .....
 2 .....

   --
   21012
-2 .....
-1 ..X..
 0 ..X..
 1 ..XX.
 2 .....


   --
   21012
-2 .....
-1 .....
 0 .XXXX
 1 .....
 2 .....

   --
   21012
-2 ..X..
-1 ..X..
 0 ..X..
 1 ..X..
 2 .....

   --
   21012
-2 .....
-1 .XXXX
 0 .....
 1 .....
 2 .....

   --
   21012
-2 ...X.
-1 ...X.
 0 ...X.
 1 ...X.
 2 .....

 0: 52.000000
 1: 46.648487
 2: 41.847717
 3: 37.541016
 4: 33.677528
 5: 30.211651
 6: 27.102457
 7: 24.313244
 8: 21.811077
 9: 19.566418
10: 17.552767
11: 15.746346
12: 14.125831
13: 12.672090
14: 11.367958
15: 10.198039
16: 9.148521
17: 8.207013
18: 7.362399
19: 6.604707
20: 5.924992
21: 5.315229
22: 4.768219
23: 4.277504
24: 3.837290
25: 3.442381
26: 3.088112
27: 2.770303
28: 2.485201
29: 2.229440
30: 2.000000


        final long seed = ThreadLocalRandom.current().nextLong();
        GameStateSource.getState().init(GameState.Mode.VS_AI, seed, 10, 0, 0, true, 0, 0);     
        
        ai.init(GameStateSource.getState().getMode(), seed, 
                (short) GameStateSource.getState().getStates()[1].getLevel(), 
                0, 
                GameStateSource.getState().getStates()[1].getFloorHeight(), 
                15,
                false); // TODO


    private final Ai ai = new Ai();
    private float moveTimer;
    private final List<Byte> moves = new ArrayList<>(1024);


//        client.update();
//        server.update();
//        
//        final GameState state = GameStateSource.getState();
//        InputEventSource.poll(eventList);
//        for (int i = 0; i < eventList.size(); ++i) {
//            state.handleInputEvent(eventList.get(i), 0);
//        }
//        state.update();

// --------------------

//        {
//            final GameState state = GameStateSource.getState();
//            InputEventSource.poll(eventList);
//            for (int i = 0; i < eventList.size(); ++i) {  
//                state.handleInputEvent(eventList.get(i), 0);
//            }
//        }
//
//        {
//            final MonoGameState state = GameStateSource.getState().getStates()[1];
//            final float framesPerMove = Ai.getFramesPerMove(15);
//            
//            if (state.isJustSpawned()) { 
//                moveTimer = framesPerMove;
//                ai.getMoves(moves, state.getLastAttackRows());
//            } 
//                        
//            --moveTimer;            
//            while (moveTimer <= 0) {
//                moveTimer += framesPerMove;
//                if (moves.isEmpty()) {
//                    state.handleInputEvent(InputEvent.SOFT_DROP_PRESSED);
//                } else {                    
//                    state.handleInputEvent(moves.remove(0));
//                }
//            }                
//        }
//                
//        GameStateSource.getState().update();

// --------------------

//        InputEventSource.clear();
//        titleScreenState.update();
//        recordsState.update();

// --------------------

//        {
//            final GameState state = GameStateSource.getState();
//            InputEventSource.poll(eventList);
//            for (int i = 0; i < eventList.size(); ++i) {
//                state.handleInputEvent(eventList.get(i), 0);
//            }
//        }
//
//        {
//            final MonoGameState state = GameStateSource.getState().getStates()[0];
//            
//            if (state.isJustSpawned()) { 
//                moveTimer = state.getFramesPerGravityDrop() / 2;
//                ai.getMoves(moves, state.getLastAttackRows());
//            } 
//                        
//            --moveTimer;            
//            while (moveTimer <= 0) {
//                moveTimer += state.getFramesPerGravityDrop() / 2;
//                if (moves.isEmpty()) {
//                    state.handleInputEvent(InputEvent.SOFT_DROP_PRESSED);
//                } else {                    
//                    state.handleInputEvent(moves.remove(0));
//                }
//            }                
//        }
//                
//        GameStateSource.getState().update();

// ----------------

//      attractModeState.update();

//        menu.update();

//        question.update();

//        congratsScreenState.update();

        keyMapModeState.update();





//        gameRenderer.render(g, size, GameStateSource.getState(), null);


//        recordsRender.render(g, size, recordsState);

//        attractModeRenderer.render(g, size, attractModeState);

//        menuRenderer.render(g, size, menu);

//        questionRenderer.render(g, size, question);

//        congratsScreenRenderer.render(g, size, congratsScreenState);

        keyMapModeRenderer.render(g, size, keyMapModeState);